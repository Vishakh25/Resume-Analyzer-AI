# resume_analyzer_backend/core/settings.py

"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from decouple import config # Import config from python-decouple

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# GENERATED KEY - MAKE SURE TO REPLACE THIS WITH A UNIQUE, STRONG KEY IN PRODUCTION!
SECRET_KEY = 'django-insecure-z-t@_o+v%j5k(f#i5b4h9q0e-b*4d4b1f4g7i8h0j4c0m2n8p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', # Add Django REST Framework
    'corsheaders',    # Add django-cors-headers
    'analyzer',       # Add your new app (the app we created for API logic)
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # IMPORTANT: CorsMiddleware should be placed as high as possible, especially before
    # any middleware that generates responses, e.g., CommonMiddleware.
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'
# If you plan to use an ASGI server (like daphne or uvicorn) for
# asynchronous support (which we're doing for async API calls to Gemini),
# you might uncomment the line below and ensure your project is set up for ASGI.
# For simple development, WSGI is fine, but ASGI is better for async.
ASGI_APPLICATION = 'core.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- CORS Configuration ---
# This is critical for your React frontend to communicate with your Django backend.
# Add your React app's development URL here.
# In production, replace "http://localhost:3000" with your actual deployed frontend domain.
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", # Your React frontend development server
    "http://127.0.0.1:3000", # Sometimes needed depending on how localhost resolves
    # "https://your-deployed-frontend.com", # Example: If you deploy your frontend
]
# Allow specific headers if needed, or allow all for simplicity during development.
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
# Allow specific HTTP methods.
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "POST",
    "PUT",
    "PATCH", # Often used for partial updates
]
# You can set this to True if your frontend needs to send cookies (e.g., for session management)
CORS_ALLOW_CREDENTIALS = True


# --- Google Gemini API Key ---
# This pulls the API key from your .env file.
# You MUST have a .env file in the same directory as manage.py
# with a line like: GOOGLE_API_KEY="YOUR_ACTUAL_GEMINI_API_KEY_HERE"
# For production, consider using a more secure method for environment variables.
GOOGLE_API_KEY = config('GOOGLE_API_KEY')